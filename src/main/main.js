const { app, BrowserWindow, ipcMain, Tray, Menu, nativeImage } = require('electron');
const path = require('path');
const { initializeSSEMCPServer } = require('../mcp/sse/wrapper.js');
const { settingsManager } = require('../config/settings.js');
const i18n = require('../i18n');

// ÁîüÊàêMCPÊúçÂä°Âô®‰ª™Ë°®ÊùøHTML
function generateMCPDashboardHTML(mcpInfo) {
    const statusColor = mcpInfo.status === 'running' ? '#10b981' : '#ef4444';
    const statusIcon = mcpInfo.status === 'running' ? '‚úÖ' : '‚ùå';
    const statusText = mcpInfo.status === 'running' ? 'ËøêË°å‰∏≠' : 'ÂêØÂä®Â§±Ë¥•';
    
    const endpointsHTML = mcpInfo.endpoints.map(endpoint => `
        <div class="endpoint-item">
            <div class="endpoint-name">${endpoint.name}</div>
            <div class="endpoint-path">http://localhost:${mcpInfo.port}${endpoint.path}</div>
            <div class="endpoint-desc">${endpoint.description}</div>
        </div>
    `).join('');

    return `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NexusGUI - MCP ÊúçÂä°Âô®ÊéßÂà∂Âè∞</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .title {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }
        
        .subtitle {
            color: #666;
            font-size: 1.1rem;
        }
        
        .status-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            border-left: 4px solid ${statusColor};
        }
        
        .status-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .status-icon {
            font-size: 1.5rem;
            margin-right: 10px;
        }
        
        .status-text {
            font-size: 1.3rem;
            font-weight: 600;
            color: ${statusColor};
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .info-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .info-label {
            font-weight: 500;
            color: #666;
        }
        
        .info-value {
            font-weight: 600;
            color: #333;
        }
        
        .endpoints-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }
        
        .endpoints-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
            display: flex;
            align-items: center;
        }
        
        .endpoints-title::before {
            content: 'üîó';
            margin-right: 10px;
        }
        
        .endpoint-item {
            background: #f8fafc;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 12px;
            border-left: 3px solid #3b82f6;
        }
        
        .endpoint-name {
            font-weight: 600;
            color: #1e40af;
            margin-bottom: 5px;
        }
        
        .endpoint-path {
            font-family: 'Monaco', 'Menlo', monospace;
            background: #e5e7eb;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9rem;
            margin-bottom: 5px;
            word-break: break-all;
        }
        
        .endpoint-desc {
            color: #6b7280;
            font-size: 0.9rem;
        }
        
        .error-card {
            background: #fef2f2;
            border: 1px solid #fecaca;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 25px;
        }
        
        .error-title {
            color: #dc2626;
            font-weight: 600;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }
        
        .error-title::before {
            content: '‚ö†Ô∏è';
            margin-right: 8px;
        }
        
        .error-message {
            color: #991b1b;
            font-family: 'Monaco', 'Menlo', monospace;
            background: #fee2e2;
            padding: 10px;
            border-radius: 6px;
            font-size: 0.9rem;
        }
        
        .actions-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }
        
        .actions-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
            display: flex;
            align-items: center;
        }
        
        .actions-title::before {
            content: '‚ö°';
            margin-right: 10px;
        }
        
        .action-buttons {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .btn-primary {
            background: #3b82f6;
            color: white;
        }
        
        .btn-primary:hover {
            background: #2563eb;
            transform: translateY(-1px);
        }
        
        .btn-secondary {
            background: #6b7280;
            color: white;
        }
        
        .btn-secondary:hover {
            background: #4b5563;
            transform: translateY(-1px);
        }
        
        .footer {
            text-align: center;
            margin-top: 30px;
            color: #666;
            font-size: 0.9rem;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">üöÄ NexusGUI</h1>
            <p class="subtitle">Model Context Protocol ÊúçÂä°Âô®ÊéßÂà∂Âè∞</p>
        </div>
        
        <div class="status-card">
            <div class="status-header">
                <span class="status-icon ${mcpInfo.status === 'running' ? 'pulse' : ''}">${statusIcon}</span>
                <span class="status-text">MCP ÊúçÂä°Âô® ${statusText}</span>
            </div>
            
            <div class="info-grid">
                <div class="info-item">
                    <span class="info-label">ÊúçÂä°Âô®ÂêçÁß∞</span>
                    <span class="info-value">${mcpInfo.serverName || 'nexusgui-sse-server'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">ÁâàÊú¨</span>
                    <span class="info-value">${mcpInfo.version || '0.1.0'}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">ÁõëÂê¨Á´ØÂè£</span>
                    <span class="info-value">${mcpInfo.port}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">ÂêØÂä®Êó∂Èó¥</span>
                    <span class="info-value">${new Date(mcpInfo.startTime).toLocaleString('zh-CN')}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Âπ≥Âè∞</span>
                    <span class="info-value">${process.platform}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Node.js</span>
                    <span class="info-value">${process.version}</span>
                </div>
            </div>
        </div>
        
        ${mcpInfo.error ? `
        <div class="error-card">
            <div class="error-title">ÂêØÂä®ÈîôËØØ</div>
            <div class="error-message">${mcpInfo.error}</div>
        </div>
        ` : ''}
        
        ${mcpInfo.status === 'running' ? `
        <div class="endpoints-card">
            <div class="endpoints-title">API Á´ØÁÇπ</div>
            ${endpointsHTML}
        </div>
        ` : ''}
        
        <div class="actions-card">
            <div class="actions-title">Âø´ÈÄüÊìç‰Ωú</div>
            <div class="action-buttons">
                ${mcpInfo.status === 'running' ? `
                <button class="btn btn-primary" onclick="openHealthCheck()">ÂÅ•Â∫∑Ê£ÄÊü•</button>
                <button class="btn btn-primary" onclick="openDebugInfo()">Ë∞ÉËØï‰ø°ÊÅØ</button>
                ` : ''}
                <button class="btn btn-secondary" onclick="refreshStatus()">Âà∑Êñ∞Áä∂ÊÄÅ</button>
                <button class="btn btn-secondary" onclick="openDevTools()">ÂºÄÂèëËÄÖÂ∑•ÂÖ∑</button>
            </div>
        </div>
        
        <div class="footer">
            <p>NexusGUI - Áî± AI È©±Âä®ÁöÑÂä®ÊÄÅÁïåÈù¢ÁîüÊàêÂô®</p>
            <p>Á≠âÂæÖ AI ÈÄöËøá MCP ÂçèËÆÆÂèëÈÄÅÁïåÈù¢ÂÆö‰πâ...</p>
        </div>
    </div>
    
    <script>
        function openHealthCheck() {
            window.open('http://localhost:${mcpInfo.port}/health', '_blank');
        }
        
        function openDebugInfo() {
            window.open('http://localhost:${mcpInfo.port}/debug/sessions', '_blank');
        }
        
        function refreshStatus() {
            location.reload();
        }
        
        function openDevTools() {
            if (window.electronAPI) {
                window.electronAPI.send('open-dev-tools');
            }
        }
        
        // ÂÆöÊúüÊõ¥Êñ∞Áä∂ÊÄÅ
        setInterval(() => {
            const statusElements = document.querySelectorAll('.pulse');
            statusElements.forEach(el => {
                el.style.opacity = el.style.opacity === '0.7' ? '1' : '0.7';
            });
        }, 1000);
        
        console.log('üé® NexusGUI MCP ÊéßÂà∂Âè∞Â∑≤Âä†ËΩΩ');
        console.log('üìä ÊúçÂä°Âô®Áä∂ÊÄÅ:', ${JSON.stringify(mcpInfo)});
    </script>
</body>
</html>`;
}

// __dirname Âú® CommonJS ‰∏≠Â∑≤ÁªèÂèØÁî®

let mainWindow;
let sseServer;
let tray = null;
let mcpServerInfo = null;

// Áªü‰∏Ä GUI ÂàõÂª∫ÂáΩÊï∞
async function createWindow(config = {}) {
    // ÂàõÂª∫‰∏Ä‰∏™ Promise Áî®‰∫éÂêåÊ≠•Á≠âÂæÖÁ™óÂè£ÁªìÊûú
    let resolveWindowResult;
    const windowResultPromise = config.waitForResult ? new Promise(resolve => {
        resolveWindowResult = resolve;
    }) : null;
    console.log('üîç ÂºÄÂßãÂàõÂª∫Á™óÂè£...');

    // Ê£ÄÊü•ÊòØÂê¶Â§çÁî®Áé∞ÊúâÁ™óÂè£
    const reuseWindow = config.reuseWindow || false;

    if (reuseWindow) {
        // Â∞ùËØïÂ§çÁî®Áé∞ÊúâÁ™óÂè£
        const existingWindows = BrowserWindow.getAllWindows();
        if (existingWindows.length > 0) {
            console.log(`üîç ÂèëÁé∞ ${existingWindows.length} ‰∏™Áé∞ÊúâÁ™óÂè£ÔºåÂ∞ùËØïÂ§çÁî®...`);

            // ÊâæÂà∞Á¨¨‰∏Ä‰∏™ÂèØÁî®ÁöÑÁ™óÂè£
            for (const win of existingWindows) {
                if (!win.isDestroyed()) {
                    console.log(`‚úÖ Â§çÁî®Áé∞ÊúâÁ™óÂè£: ${win.getTitle()}`);

                    // Êõ¥Êñ∞Á™óÂè£ÈÖçÁΩÆ
                    if (config.width && config.height) {
                        win.setSize(config.width, config.height);
                    }
                    if (config.title) {
                        win.setTitle(config.title);
                    }
                    if (config.alwaysOnTop !== undefined) {
                        win.setAlwaysOnTop(config.alwaysOnTop);
                    }
                    if (config.opacity !== undefined) {
                        win.setOpacity(config.opacity);
                    }
                    if (config.fullscreen !== undefined) {
                        win.setFullScreen(config.fullscreen);
                    }
                    if (config.zoomFactor !== undefined) {
                        win.webContents.setZoomFactor(config.zoomFactor);
                    }

                    // ÈáçÊñ∞Âä†ËΩΩÂÜÖÂÆπ
                    try {
                        if (config.html) {
                            console.log('üìÑ ‰ΩøÁî® HTML Ê®°ÂºèÈáçÊñ∞Ê∏≤Êüì');
                            win.webContents.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(config.html)}`);
                        } else {
                            await win.loadFile(path.join(__dirname, '../renderer/index.html'));
                            console.log('‚úÖ HTML Êñá‰ª∂ÈáçÊñ∞Âä†ËΩΩÊàêÂäü');
                        }

                        // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂèëÈÄÅÈÖçÁΩÆ
                        win.webContents.once('did-finish-load', () => {
                            console.log('‚úÖ È°µÈù¢ÈáçÊñ∞Âä†ËΩΩÂÆåÊàêÔºåÂèëÈÄÅÈÖçÁΩÆÂà∞Ê∏≤ÊüìËøõÁ®ã');

                            if (!config.html) {
                                console.warn('üìä '); 
                            }

                            // Á°Æ‰øùÁ™óÂè£ÊòæÁ§∫Âπ∂ËÅöÁÑ¶
                            win.show();
                            win.focus();

                            // Â∞ÜÁ™óÂè£ÁßªÂà∞ÂâçÂè∞ÔºàÁü≠ÊöÇÁΩÆÈ°∂Ôºâ
                            win.setAlwaysOnTop(true);
                            setTimeout(() => {
                                win.setAlwaysOnTop(config.alwaysOnTop);
                                // ÂÜçÊ¨°Á°Æ‰øùÁ™óÂè£ÂèØËßÅ
                                win.show();
                                win.focus();
                            }, 200);

                            console.log('‚úÖ Â§çÁî®Á™óÂè£Â∑≤Êõ¥Êñ∞Âπ∂ÊòæÁ§∫');
                        });

                        return win;
                    } catch (error) {
                        console.error('‚ùå Â§çÁî®Á™óÂè£Êó∂Âä†ËΩΩÂÜÖÂÆπÂ§±Ë¥•:', error);
                        // Â¶ÇÊûúÂ§çÁî®Â§±Ë¥•ÔºåÁªßÁª≠ÂàõÂª∫Êñ∞Á™óÂè£
                    }
                }
            }
        }
    } else {
        // Ê£ÄÊü•Âπ∂ÂÖ≥Èó≠Áé∞ÊúâÁ™óÂè£
        const existingWindows = BrowserWindow.getAllWindows();
        if (existingWindows.length > 0) {
            console.log(`üîç ÂèëÁé∞ ${existingWindows.length} ‰∏™Áé∞ÊúâÁ™óÂè£ÔºåÊ≠£Âú®ÂÖ≥Èó≠...`);
            for (const win of existingWindows) {
                if (!win.isDestroyed()) {
                    win.close();
                }
            }
            // Á≠âÂæÖÁ™óÂè£ÂÖ≥Èó≠
            await new Promise(resolve => setTimeout(resolve, 100));
        }
    }

    // Á™óÂè£Â±ûÊÄßÈÖçÁΩÆ
    const windowConfig = {
        width: config.width || 800,
        height: config.height || 600,
        title: config.title || 'NexusGUI - Âä®ÊÄÅÁïåÈù¢',
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            preload: path.join(__dirname, 'preload.js')
        },
        show: false,
        titleBarStyle: config.showMenuBar === false ? 'hidden' : 'default',
        icon: path.join(__dirname, 'assets', 'icon.png'), // ÂèØÈÄâÂõæÊ†á
        // Á°Æ‰øùÁ™óÂè£Âú®Â±èÂπï‰∏≠Â§ÆÊòæÁ§∫
        center: true,
        // ËÆæÁΩÆÊúÄÂ∞èÂ∞∫ÂØ∏
        minWidth: config.minWidth || 400,
        minHeight: config.minHeight || 300,
        // ËÆæÁΩÆÊúÄÂ§ßÂ∞∫ÂØ∏
        maxWidth: config.maxWidth,
        maxHeight: config.maxHeight,
        // Á™óÂè£ÂèØËßÅÊÄßËÆæÁΩÆ
        alwaysOnTop: config.alwaysOnTop || false,
        skipTaskbar: config.skipTaskbar || false,
        // Á°Æ‰øùÁ™óÂè£Âú®‰ªªÂä°Ê†èÊòæÁ§∫
        showInTaskbar: config.showInTaskbar !== false,
        // ËÆæÁΩÆÁ™óÂè£‰ΩçÁΩÆÔºàÂ±èÂπï‰∏≠Â§ÆÔºâ
        x: config.x,
        y: config.y,
        // Á™óÂè£Ê†∑ÂºèËÆæÁΩÆ
        frame: config.frame !== false,
        titleBarStyle: config.titleBarStyle || 'default',
        // Á™óÂè£Ë°å‰∏∫ËÆæÁΩÆ
        resizable: config.resizable !== false,
        movable: config.movable !== false,
        minimizable: config.minimizable !== false,
        maximizable: config.maximizable !== false,
        closable: config.closable !== false,
        // ÈÄèÊòéÂ∫¶ËÆæÁΩÆ
        opacity: config.opacity,
        // Á™óÂè£Á±ªÂûãËÆæÁΩÆ
        type: config.windowType || 'normal',
        // ÂÖ®Â±èËÆæÁΩÆ
        fullscreen: config.fullscreen || false,
        // Áº©ÊîæËÆæÁΩÆ
        zoomFactor: config.zoomFactor
    };

    console.log('üîç ÂàõÂª∫Á™óÂè£:', config);
    console.log('üì± Á™óÂè£ÈÖçÁΩÆ:', windowConfig);

    const win = new BrowserWindow(windowConfig);

    console.log('üîç ÂàõÂª∫Á™óÂè£:', config);
    console.log('üì± Á™óÂè£ÈÖçÁΩÆ:', {
        width: config.width || 800,
        height: config.height || 600,
        title: config.title || 'NexusGUI - Âä®ÊÄÅÁïåÈù¢'
    });


    try {

        if (config.html) {
            console.log('üìÑ ‰ΩøÁî® HTML Ê®°ÂºèÊ∏≤Êüì');
            // Áõ¥Êé•Âä†ËΩΩ HTML ÂÜÖÂÆπÂà∞Ê∏≤ÊüìÁ™óÂè£
            win.webContents.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(config.html)}`);
            console.log('‚úÖ HTML ÂÜÖÂÆπÂ∑≤Áõ¥Êé•Âä†ËΩΩÂà∞Ê∏≤ÊüìÁ™óÂè£');

        } else {
            await win.loadFile(path.join(__dirname, '../renderer/index.html'));
            console.log('‚úÖ HTML Êñá‰ª∂Âä†ËΩΩÊàêÂäü');
        }

    } catch (error) {
        console.error('‚ùå HTML Êñá‰ª∂Âä†ËΩΩÂ§±Ë¥•:', error);
        throw error;
    }

    // Ê∑ªÂä†Ë∂ÖÊó∂Êú∫Âà∂ÔºåÁ°Æ‰øùÁ™óÂè£‰∏ÄÂÆö‰ºöÊòæÁ§∫
    let isWindowShown = false;

    // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂèëÈÄÅÈÖçÁΩÆ
    win.webContents.once('did-finish-load', () => {
        console.log('‚úÖ È°µÈù¢Âä†ËΩΩÂÆåÊàêÔºåÂèëÈÄÅÈÖçÁΩÆÂà∞Ê∏≤ÊüìËøõÁ®ã');

        if (!isWindowShown) {
            isWindowShown = true;

            console.log(`DEBUG: In createWindow, config.html type: ${typeof config.html}`);
            console.log(`DEBUG: In createWindow, config.html value:`, config.html ? config.html.substring(0, 50) + '...' : 'null/undefined/empty');
            // Ê£ÄÊü•ÊòØÂê¶‰ΩøÁî® HTML Ê®°Âºè
            // HTML Ê®°ÂºèÔºöÂÜÖÂÆπÂ∑≤ÈÄöËøá loadURL Áõ¥Êé•Âä†ËΩΩ
            if (!config.html) {
                console.warn('‚ö†Ô∏è Êú™Êèê‰æõ HTML ÂÜÖÂÆπ');
            }

            // Á°Æ‰øùÁ™óÂè£ÊòæÁ§∫Âπ∂ËÅöÁÑ¶
            win.show();
            win.focus();

            // Â∞ÜÁ™óÂè£ÁßªÂà∞ÂâçÂè∞ÔºàÁü≠ÊöÇÁΩÆÈ°∂Ôºâ
            win.setAlwaysOnTop(true);
            setTimeout(() => {
                win.setAlwaysOnTop(config.alwaysOnTop);
                // ÂÜçÊ¨°Á°Æ‰øùÁ™óÂè£ÂèØËßÅ
                win.show();
                win.focus();
            }, 200);

            console.log('‚úÖ Á™óÂè£Â∑≤ÊòæÁ§∫Âπ∂ËÅöÁÑ¶');
        }
    });

    // Ê∑ªÂä†Ë∂ÖÊó∂Êú∫Âà∂ÔºåÂ¶ÇÊûúÈ°µÈù¢Âä†ËΩΩË∂ÖÊó∂ÔºåÂº∫Âà∂ÊòæÁ§∫Á™óÂè£
    setTimeout(() => {
        if (!isWindowShown) {
            console.log('‚ö†Ô∏è È°µÈù¢Âä†ËΩΩË∂ÖÊó∂ÔºåÂº∫Âà∂ÊòæÁ§∫Á™óÂè£');
            isWindowShown = true;

            // HTML Ê®°Âºè‰∏çÈúÄË¶ÅÂèëÈÄÅÈÖçÁΩÆÂà∞Ê∏≤ÊüìËøõÁ®ã

            // Âº∫Âà∂ÊòæÁ§∫Á™óÂè£
            win.show();
            win.focus();
            win.setAlwaysOnTop(true);
            setTimeout(() => {
                win.setAlwaysOnTop(config.alwaysOnTop);
            }, 500);

            console.log('‚úÖ Á™óÂè£Â∑≤Âº∫Âà∂ÊòæÁ§∫');
        }
    }, 3000); // 3ÁßíË∂ÖÊó∂

    // Ë∞ÉËØïÈ°µÈù¢Âä†ËΩΩÂ§±Ë¥•
    win.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
        console.error('üîç È°µÈù¢Âä†ËΩΩÂ§±Ë¥•:', errorCode, errorDescription);
    });

    // Ê∑ªÂä†Êõ¥Â§öÈ°µÈù¢Âä†ËΩΩË∞ÉËØï‰ø°ÊÅØ
    win.webContents.on('did-start-loading', () => {
        console.log('üîÑ È°µÈù¢ÂºÄÂßãÂä†ËΩΩ');
    });

    win.webContents.on('did-stop-loading', () => {
        console.log('‚èπÔ∏è È°µÈù¢ÂÅúÊ≠¢Âä†ËΩΩ');
    });

    win.webContents.on('dom-ready', () => {
        console.log('üìÑ DOM Â∑≤ÂáÜÂ§áÂ∞±Áª™');
    });

    // ÂºÄÂèëÊ®°Âºè‰∏ãÊâìÂºÄÂºÄÂèëËÄÖÂ∑•ÂÖ∑
    if (process.argv.includes('--dev')) {
        win.webContents.openDevTools();
        console.log('üîß ÂºÄÂèëËÄÖÂ∑•ÂÖ∑Â∑≤ÊâìÂºÄ');
    }

    // ÁõëÂê¨Á™óÂè£‰∫ã‰ª∂
    win.on('ready-to-show', () => {
        console.log('‚úÖ Á™óÂè£ÂáÜÂ§áÊòæÁ§∫');
    });

    win.on('show', () => {
        console.log('‚úÖ Á™óÂè£Â∑≤ÊòæÁ§∫');
    });

    win.on('focus', () => {
        console.log('‚úÖ Á™óÂè£Â∑≤ËÅöÁÑ¶');
    });

    // ÁõëÂê¨Á™óÂè£ÂÖ≥Èó≠‰∫ã‰ª∂
    win.on('closed', () => {
        console.log('‚úÖ Á™óÂè£Â∑≤ÂÖ≥Èó≠');
        
        // Â¶ÇÊûúÁ™óÂè£ÊúâÁªìÊûúËß£ÊûêÂô®‰ΩÜÂ∞öÊú™Ëß£ÊûêÔºåÂàôÂú®Á™óÂè£ÂÖ≥Èó≠Êó∂Ëß£Êûê
        if (win.windowResultResolver) {
            win.windowResultResolver({
                action: 'close',
                data: null
            });
        }
    });
    
    // Â¶ÇÊûúÈúÄË¶ÅÁ≠âÂæÖÁªìÊûúÔºåÂ≠òÂÇ®Ëß£ÊûêÂô®Âà∞Á™óÂè£ÂØπË±°
    if (config.waitForResult && resolveWindowResult) {
        win.windowResultResolver = resolveWindowResult;
    }
    
    // Â¶ÇÊûúÈúÄË¶ÅÁ≠âÂæÖÁªìÊûúÔºåËøîÂõû PromiseÔºåÂê¶ÂàôËøîÂõûÁ™óÂè£ÂØπË±°
    if (config.waitForResult) {
        console.log('‚è≥ Á≠âÂæÖÁ™óÂè£ÁªìÊûú...');
        const result = await windowResultPromise;
        console.log('‚úÖ Êî∂Âà∞Á™óÂè£ÁªìÊûú:', result);
        return result;
    } else {
        return win;
    }
}

// Êö¥Èú≤ÁªôÂÖ®Â±ÄÔºå‰æõ MCP ÊúçÂä°Âô®Ë∞ÉÁî®
global.createWindow = async(config = {}) => {
    console.log('üåê ÈÄöËøá MCP Ë∞ÉÁî®ÂàõÂª∫Á™óÂè£');

    return await createWindow(config);
};

// ÂàõÂª∫Á≥ªÁªüÊâòÁõòÂõæÊ†á
function createTrayIcon() {
    // ÂàõÂª∫ÊâòÁõòÂõæÊ†á (‰ΩøÁî®Á≥ªÁªüÈªòËÆ§ÂõæÊ†áÊàñËá™ÂÆö‰πâÂõæÊ†á)
    const iconPath = path.join(__dirname, '../../assets/tray-icon.png');
    let trayIcon;
    
    try {
        // Â∞ùËØï‰ΩøÁî®Ëá™ÂÆö‰πâÂõæÊ†á
        trayIcon = nativeImage.createFromPath(iconPath);
        if (trayIcon.isEmpty()) {
            throw new Error('Ëá™ÂÆö‰πâÂõæÊ†á‰∏∫Á©∫');
        }
    } catch (error) {
        // Â¶ÇÊûúËá™ÂÆö‰πâÂõæÊ†á‰∏çÂ≠òÂú®Ôºå‰ΩøÁî®Á≥ªÁªüÈªòËÆ§ÂõæÊ†á
        console.log('‰ΩøÁî®Á≥ªÁªüÈªòËÆ§ÊâòÁõòÂõæÊ†á');
        trayIcon = nativeImage.createEmpty();
        // Âú®macOS‰∏äÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊ®°ÊùøÂõæÊ†á
        if (process.platform === 'darwin') {
            trayIcon = nativeImage.createFromNamedImage('NSStatusAvailable', [16, 16]);
        }
    }
    
    tray = new Tray(trayIcon);
    
    // ËÆæÁΩÆÊâòÁõòÊèêÁ§∫ÊñáÊú¨
    tray.setToolTip('NexusGUI - MCP ÊúçÂä°Âô®ÊéßÂà∂Âè∞');
    
    // ÂàõÂª∫ÊâòÁõòËèúÂçï
    updateTrayMenu();
    
    // ÂèåÂáªÊâòÁõòÂõæÊ†áÊòæÁ§∫‰∏ªÊéßÂà∂Âè∞
    tray.on('double-click', () => {
        showMCPConsole();
    });
    
    console.log('‚úÖ Á≥ªÁªüÊâòÁõòÂ∑≤ÂàõÂª∫');
}

// Êõ¥Êñ∞ÊâòÁõòËèúÂçï
function updateTrayMenu() {
    if (!tray) return;
    
    const serverStatus = mcpServerInfo?.status === 'running' ? 'üü¢ ËøêË°å‰∏≠' : 'üî¥ Â∑≤ÂÅúÊ≠¢';
    const serverPort = mcpServerInfo?.port || 'Êú™Áü•';
    const activeSessions = getActiveSessionsCount();
    
    const contextMenu = Menu.buildFromTemplate([
        {
            label: `NexusGUI MCP ÊúçÂä°Âô®`,
            type: 'normal',
            enabled: false
        },
        { type: 'separator' },
        {
            label: `Áä∂ÊÄÅ: ${serverStatus}`,
            type: 'normal',
            enabled: false
        },
        {
            label: `Á´ØÂè£: ${serverPort}`,
            type: 'normal',
            enabled: false
        },
        {
            label: `Ê¥ªÂä®‰ºöËØù: ${activeSessions}`,
            type: 'normal',
            enabled: false
        },
        { type: 'separator' },
        {
            label: 'üìä MCP ÊúçÂä°Âô®ÊéßÂà∂Âè∞',
            type: 'normal',
            click: () => showMCPConsole()
        },
        {
            label: 'üîß Ë∞ÉËØï‰ø°ÊÅØÁ™óÂè£',
            type: 'normal',
            enabled: mcpServerInfo?.status === 'running',
            click: () => showDebugWindow()
        },
        {
            label: 'üè• ÂÅ•Â∫∑Ê£ÄÊü•',
            type: 'normal',
            enabled: mcpServerInfo?.status === 'running',
            click: () => showHealthCheck()
        },
        {
            label: 'üìã ‰ºöËØùÁÆ°ÁêÜ',
            type: 'normal',
            enabled: mcpServerInfo?.status === 'running',
            click: () => showSessionManager()
        },
        { type: 'separator' },
        {
            label: 'üîÑ Âà∑Êñ∞Áä∂ÊÄÅ',
            type: 'normal',
            click: () => refreshServerStatus()
        },
        {
            label: '‚öôÔ∏è ÊúçÂä°Âô®ËÆæÁΩÆ',
            type: 'normal',
            click: () => showServerSettings()
        },
        { type: 'separator' },
        {
            label: 'üö™ ÈÄÄÂá∫',
            type: 'normal',
            click: () => {
                app.quit();
            }
        }
    ]);
    
    tray.setContextMenu(contextMenu);
}

// Ëé∑ÂèñÊ¥ªÂä®‰ºöËØùÊï∞Èáè
function getActiveSessionsCount() {
    // ËøôÈáåÈúÄË¶Å‰ªéMCPÊúçÂä°Âô®Ëé∑ÂèñÂÆûÈôÖÁöÑ‰ºöËØùÊï∞Èáè
    // ÊöÇÊó∂ËøîÂõûÊ®°ÊãüÊï∞ÊçÆ
    return 0;
}

// ÊòæÁ§∫MCPÊúçÂä°Âô®ÊéßÂà∂Âè∞
async function showMCPConsole() {
    try {
        const consoleWindow = await createWindow({
            title: 'NexusGUI - MCP ÊúçÂä°Âô®ÊéßÂà∂Âè∞',
            width: 900,
            height: 700,
            html: generateMCPDashboardHTML(mcpServerInfo),
            alwaysOnTop: false,
            reuseWindow: true
        });
        
        console.log('‚úÖ MCP ÊéßÂà∂Âè∞Á™óÂè£Â∑≤ÊòæÁ§∫');
    } catch (error) {
        console.error('‚ùå ÊòæÁ§∫MCPÊéßÂà∂Âè∞Â§±Ë¥•:', error);
    }
}

// ÊòæÁ§∫Ë∞ÉËØï‰ø°ÊÅØÁ™óÂè£
async function showDebugWindow() {
    if (!mcpServerInfo || mcpServerInfo.status !== 'running') {
        console.log('‚ö†Ô∏è MCPÊúçÂä°Âô®Êú™ËøêË°åÔºåÊó†Ê≥ïÊòæÁ§∫Ë∞ÉËØï‰ø°ÊÅØ');
        return;
    }
    
    const debugHtml = generateDebugWindowHTML();
    
    try {
        await createWindow({
            title: 'MCP ÊúçÂä°Âô® - Ë∞ÉËØï‰ø°ÊÅØ',
            width: 800,
            height: 600,
            html: debugHtml,
            alwaysOnTop: true
        });
        
        console.log('‚úÖ Ë∞ÉËØï‰ø°ÊÅØÁ™óÂè£Â∑≤ÊòæÁ§∫');
    } catch (error) {
        console.error('‚ùå ÊòæÁ§∫Ë∞ÉËØïÁ™óÂè£Â§±Ë¥•:', error);
    }
}

// ÊòæÁ§∫ÂÅ•Â∫∑Ê£ÄÊü•Á™óÂè£
async function showHealthCheck() {
    if (!mcpServerInfo || mcpServerInfo.status !== 'running') {
        console.log('‚ö†Ô∏è MCPÊúçÂä°Âô®Êú™ËøêË°åÔºåÊó†Ê≥ïËøõË°åÂÅ•Â∫∑Ê£ÄÊü•');
        return;
    }
    
    try {
        // Áõ¥Êé•ÊâìÂºÄÂÅ•Â∫∑Ê£ÄÊü•URL
        const { shell } = require('electron');
        await shell.openExternal(`http://localhost:${mcpServerInfo.port}/health`);
        
        console.log('‚úÖ ÂÅ•Â∫∑Ê£ÄÊü•È°µÈù¢Â∑≤Âú®ÊµèËßàÂô®‰∏≠ÊâìÂºÄ');
    } catch (error) {
        console.error('‚ùå ÊâìÂºÄÂÅ•Â∫∑Ê£ÄÊü•È°µÈù¢Â§±Ë¥•:', error);
    }
}

// ÊòæÁ§∫‰ºöËØùÁÆ°ÁêÜÁ™óÂè£
async function showSessionManager() {
    if (!mcpServerInfo || mcpServerInfo.status !== 'running') {
        console.log('‚ö†Ô∏è MCPÊúçÂä°Âô®Êú™ËøêË°åÔºåÊó†Ê≥ïÊòæÁ§∫‰ºöËØùÁÆ°ÁêÜ');
        return;
    }
    
    const sessionHtml = generateSessionManagerHTML();
    
    try {
        await createWindow({
            title: 'MCP ÊúçÂä°Âô® - ‰ºöËØùÁÆ°ÁêÜ',
            width: 700,
            height: 500,
            html: sessionHtml,
            alwaysOnTop: true
        });
        
        console.log('‚úÖ ‰ºöËØùÁÆ°ÁêÜÁ™óÂè£Â∑≤ÊòæÁ§∫');
    } catch (error) {
        console.error('‚ùå ÊòæÁ§∫‰ºöËØùÁÆ°ÁêÜÁ™óÂè£Â§±Ë¥•:', error);
    }
}

// Âà∑Êñ∞ÊúçÂä°Âô®Áä∂ÊÄÅ
function refreshServerStatus() {
    console.log('üîÑ Âà∑Êñ∞ÊúçÂä°Âô®Áä∂ÊÄÅ...');
    
    // Êõ¥Êñ∞ÊâòÁõòËèúÂçï
    updateTrayMenu();
    
    // Â¶ÇÊûú‰∏ªÊéßÂà∂Âè∞Á™óÂè£ÊâìÂºÄÔºåÂà∑Êñ∞ÂÆÉ
    const windows = BrowserWindow.getAllWindows();
    windows.forEach(window => {
        if (window.getTitle().includes('MCP ÊúçÂä°Âô®ÊéßÂà∂Âè∞')) {
            window.reload();
        }
    });
    
    console.log('‚úÖ ÊúçÂä°Âô®Áä∂ÊÄÅÂ∑≤Âà∑Êñ∞');
}

// ÊòæÁ§∫ÊúçÂä°Âô®ËÆæÁΩÆÁ™óÂè£
async function showServerSettings() {
    const settingsHtml = generateServerSettingsHTML();
    
    try {
        await createWindow({
            title: 'MCP ÊúçÂä°Âô® - ËÆæÁΩÆ',
            width: 600,
            height: 400,
            html: settingsHtml,
            alwaysOnTop: true
        });
        
        console.log('‚úÖ ÊúçÂä°Âô®ËÆæÁΩÆÁ™óÂè£Â∑≤ÊòæÁ§∫');
    } catch (error) {
        console.error('‚ùå ÊòæÁ§∫ËÆæÁΩÆÁ™óÂè£Â§±Ë¥•:', error);
    }
}

app.whenReady().then(async() => {
    // ‰ªéËÆæÁΩÆ‰∏≠Ëé∑ÂèñÁ´ØÂè£
    const serverPort = settingsManager.getSetting('server.port') || 3000;
    
    mcpServerInfo = {
        status: 'failed',
        port: serverPort,
        endpoints: [],
        error: null,
        startTime: new Date().toISOString()
    };

    // ÂàùÂßãÂåñ SSE MCP ÊúçÂä°Âô®
    try {
        const { sseServer: createSSEServer } = await initializeSSEMCPServer();
        sseServer = createSSEServer(serverPort);
        
        mcpServerInfo = {
            status: 'running',
            port: serverPort,
            endpoints: [
                { name: 'SSE ËøûÊé•', path: '/mcp', description: 'Âª∫Á´ã Server-Sent Events ËøûÊé•' },
                { name: 'Ê∂àÊÅØÂ§ÑÁêÜ', path: '/messages', description: 'Â§ÑÁêÜ JSON-RPC Ê∂àÊÅØ' },
                { name: 'ÂÅ•Â∫∑Ê£ÄÊü•', path: '/health', description: 'ÊúçÂä°Âô®Áä∂ÊÄÅÊ£ÄÊü•' },
                { name: 'Ë∞ÉËØï‰ø°ÊÅØ', path: '/debug/sessions', description: 'Êü•ÁúãÊ¥ªÂä®‰ºöËØù' }
            ],
            error: null,
            startTime: new Date().toISOString(),
            serverName: 'nexusgui-sse-server',
            version: '0.1.0'
        };
        
        console.log('‚úÖ SSE MCP ÊúçÂä°Âô®Â∑≤ÂêØÂä®');
    } catch (error) {
        console.error('‚ùå SSE MCP ÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•:', error);
        mcpServerInfo.error = error.message;
    }

    // ÂàõÂª∫Á≥ªÁªüÊâòÁõò
    createTrayIcon();

    // ÂàõÂª∫‰∏ªÁ™óÂè£Âπ∂ÊòæÁ§∫MCPÊúçÂä°Âô®‰ø°ÊÅØÔºàÂèØÈÄâÔºå‰πüÂèØ‰ª•Âè™ÈÄöËøáÊâòÁõòËÆøÈóÆÔºâ
    if (process.argv.includes('--show-main-window')) {
        mainWindow = await createWindow({
            title: 'NexusGUI - MCP ÊúçÂä°Âô®ÊéßÂà∂Âè∞',
            html: generateMCPDashboardHTML(mcpServerInfo)
        });
    }

    app.on('activate', async() => {
        // Âú®macOS‰∏äÔºåÁÇπÂáªdockÂõæÊ†áÊó∂ÊòæÁ§∫‰∏ªÊéßÂà∂Âè∞
        if (process.platform === 'darwin') {
            showMCPConsole();
        }
    });
});

app.on('window-all-closed', () => {
    // ÊúâÊâòÁõòÂõæÊ†áÊó∂ÔºåÂÖ≥Èó≠ÊâÄÊúâÁ™óÂè£‰∏çÈÄÄÂá∫Â∫îÁî®
    if (tray) {
        console.log('‚úÖ ÊâÄÊúâÁ™óÂè£Â∑≤ÂÖ≥Èó≠ÔºåÂ∫îÁî®ÁªßÁª≠Âú®ÊâòÁõò‰∏≠ËøêË°å');
        return;
    }
    
    if (process.platform !== 'darwin') {
        // ÂÖ≥Èó≠ SSE MCP ÊúçÂä°Âô®
        if (sseServer) {
            sseServer.close();
        }
        app.quit();
    }
});

app.on('before-quit', () => {
    // Â∫îÁî®ÈÄÄÂá∫ÂâçÊ∏ÖÁêÜÊâòÁõò
    if (tray) {
        tray.destroy();
        tray = null;
    }
    
    // ÂÖ≥Èó≠ SSE MCP ÊúçÂä°Âô®
    if (sseServer) {
        sseServer.close();
    }
    
    console.log('‚úÖ Â∫îÁî®Ê≠£Âú®ÈÄÄÂá∫ÔºåËµÑÊ∫êÂ∑≤Ê∏ÖÁêÜ');
});

// IPC Â§ÑÁêÜÁ®ãÂ∫è
ipcMain.handle('mcp-result', async(event, result) => {
    console.log('üì§ Êî∂Âà∞Êù•Ëá™Ê∏≤ÊüìËøõÁ®ãÁöÑÁªìÊûú:', result);
    // ËøôÈáåÂèØ‰ª•Â∞ÜÁªìÊûúÂèëÈÄÅÂõû MCP ÂÆ¢Êà∑Á´Ø
    return { success: true };
});

// Â§ÑÁêÜÁ™óÂè£ÁªìÊûúÔºàÁî®‰∫éÂêåÊ≠•Á≠âÂæÖÔºâ
ipcMain.handle('window-result', async(event, result) => {
    console.log('üì§ Êî∂Âà∞Á™óÂè£ÁªìÊûú:', result);
    
    // Ëé∑ÂèñÂèëÈÄÅÁªìÊûúÁöÑÁ™óÂè£
    const win = BrowserWindow.fromWebContents(event.sender);
    if (win && win.windowResultResolver) {
        // Ëß£ÊûêÁ™óÂè£ÁªìÊûú Promise
        win.windowResultResolver({
            action: 'submit',
            data: result
        });
        
        // ÂÖ≥Èó≠Á™óÂè£
        win.close();
    }
    
    return { success: true };
});

// Â§ÑÁêÜÂºÄÂèëËÄÖÂ∑•ÂÖ∑ÊâìÂºÄËØ∑Ê±Ç
ipcMain.on('open-dev-tools', (event) => {
    const webContents = event.sender;
    webContents.openDevTools();
    console.log('üîß ÂºÄÂèëËÄÖÂ∑•ÂÖ∑Â∑≤ÊâìÂºÄ');
});

// Ê∑ªÂä†Á™óÂè£Áä∂ÊÄÅÊ£ÄÊü•
ipcMain.handle('check-window-status', async() => {
    const windows = BrowserWindow.getAllWindows();
    return {
        windowCount: windows.length,
        windows: windows.map(win => ({
            id: win.id,
            title: win.getTitle(),
            isVisible: win.isVisible(),
            isDestroyed: win.isDestroyed(),
            bounds: win.getBounds()
        }))
    };
});

// ËÆæÁΩÆÁÆ°ÁêÜ IPC Â§ÑÁêÜÁ®ãÂ∫è
ipcMain.handle('get-settings', async() => {
    try {
        return {
            success: true,
            settings: settingsManager.getAllSettings()
        };
    } catch (error) {
        console.error('‚ùå Ëé∑ÂèñËÆæÁΩÆÂ§±Ë¥•:', error);
        return {
            success: false,
            error: error.message
        };
    }
});

ipcMain.handle('save-settings', async(event, newSettings) => {
    try {
        console.log('üì• Êî∂Âà∞ËÆæÁΩÆ‰øùÂ≠òËØ∑Ê±Ç:', JSON.stringify(newSettings, null, 2));
        
        // È™åËØÅËÆæÁΩÆ
        console.log('üîç ÂºÄÂßãÈ™åËØÅËÆæÁΩÆ...');
        const validation = settingsManager.validateSettings(newSettings);
        console.log('üîç È™åËØÅÂÆåÊàêÔºåÁªìÊûú:', validation);
        
        if (!validation.isValid) {
            console.log('‚ùå ËÆæÁΩÆÈ™åËØÅÂ§±Ë¥•:', validation.errors);
            return {
                success: false,
                error: 'ËÆæÁΩÆÈ™åËØÅÂ§±Ë¥•',
                details: validation.errors
            };
        }
        
        console.log('‚úÖ ËÆæÁΩÆÈ™åËØÅÈÄöËøá');
        
        // Â§á‰ªΩÂΩìÂâçËÆæÁΩÆ
        const backupPath = settingsManager.backupSettings();
        
        // Êõ¥Êñ∞ËÆæÁΩÆ
        const success = settingsManager.updateSettings(newSettings);
        
        if (success) {
            // Â¶ÇÊûúÁ´ØÂè£ÂèëÁîüÂèòÂåñÔºåÈúÄË¶ÅÈáçÂêØÊúçÂä°Âô®
            const oldPort = mcpServerInfo.port;
            const newPort = settingsManager.getSetting('server.port');
            
            if (oldPort !== newPort) {
                console.log(`üîÑ Á´ØÂè£‰ªé ${oldPort} Êõ¥Êîπ‰∏∫ ${newPort}ÔºåÈúÄË¶ÅÈáçÂêØÊúçÂä°Âô®`);
                
                // ÂÖ≥Èó≠ÊóßÊúçÂä°Âô®
                if (sseServer) {
                    sseServer.close();
                }
                
                // ÂêØÂä®Êñ∞ÊúçÂä°Âô®
                try {
                    const { sseServer: createSSEServer } = await initializeSSEMCPServer();
                    sseServer = createSSEServer(newPort);
                    
                    mcpServerInfo.port = newPort;
                    mcpServerInfo.status = 'running';
                    mcpServerInfo.error = null;
                    
                    console.log(`‚úÖ MCP ÊúçÂä°Âô®Â∑≤Âú®Êñ∞Á´ØÂè£ ${newPort} ‰∏äÈáçÂêØ`);
                } catch (error) {
                    console.error('‚ùå ÈáçÂêØÊúçÂä°Âô®Â§±Ë¥•:', error);
                    mcpServerInfo.status = 'failed';
                    mcpServerInfo.error = error.message;
                }
                
                // Êõ¥Êñ∞ÊâòÁõòËèúÂçï
                updateTrayMenu();
            }
            
            return {
                success: true,
                message: 'ËÆæÁΩÆÂ∑≤‰øùÂ≠ò',
                backupPath,
                serverRestarted: oldPort !== newPort
            };
        } else {
            return {
                success: false,
                error: '‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•'
            };
        }
    } catch (error) {
        console.error('‚ùå ‰øùÂ≠òËÆæÁΩÆÊó∂Âá∫Èîô:', error);
        return {
            success: false,
            error: error.message
        };
    }
});

ipcMain.handle('reset-settings', async() => {
    try {
        const backupPath = settingsManager.backupSettings();
        const success = settingsManager.resetToDefaults();
        
        if (success) {
            // ÈáçÂêØÊúçÂä°Âô®‰ª•Â∫îÁî®ÈªòËÆ§Á´ØÂè£
            const defaultPort = settingsManager.getSetting('server.port');
            
            if (sseServer) {
                sseServer.close();
            }
            
            try {
                const { sseServer: createSSEServer } = await initializeSSEMCPServer();
                sseServer = createSSEServer(defaultPort);
                
                mcpServerInfo.port = defaultPort;
                mcpServerInfo.status = 'running';
                mcpServerInfo.error = null;
                
                updateTrayMenu();
                
                console.log(`‚úÖ ËÆæÁΩÆÂ∑≤ÈáçÁΩÆÔºåÊúçÂä°Âô®Âú®Á´ØÂè£ ${defaultPort} ‰∏äÈáçÂêØ`);
            } catch (error) {
                console.error('‚ùå ÈáçÂêØÊúçÂä°Âô®Â§±Ë¥•:', error);
                mcpServerInfo.status = 'failed';
                mcpServerInfo.error = error.message;
            }
            
            return {
                success: true,
                message: 'ËÆæÁΩÆÂ∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº',
                backupPath
            };
        } else {
            return {
                success: false,
                error: 'ÈáçÁΩÆËÆæÁΩÆÂ§±Ë¥•'
            };
        }
    } catch (error) {
        console.error('‚ùå ÈáçÁΩÆËÆæÁΩÆÊó∂Âá∫Èîô:', error);
        return {
            success: false,
            error: error.message
        };
    }
});

ipcMain.handle('get-form-data', async(event, formSelector) => {
    // Ëé∑ÂèñË°®ÂçïÊï∞ÊçÆÁöÑËæÖÂä©ÊñπÊ≥ï
    return new Promise((resolve) => {
        event.sender.executeJavaScript(`
      (() => {
        const form = document.querySelector('${formSelector}') || document.body;
        const formData = new FormData(form);
        const data = {};
        for (let [key, value] of formData.entries()) {
          data[key] = value;
        }
        return data;
      })()
    `).then(resolve);
    });
});

// ÂëΩ‰ª§Ë°åÂèÇÊï∞Â§ÑÁêÜÔºàÊîØÊåÅ -gui ÂèÇÊï∞Ôºâ
(async() => {
    if (process.argv.includes('-gui')) {
        const guiIndex = process.argv.indexOf('-gui');
        const guiName = process.argv[guiIndex + 1];

        if (guiName) {
            // Â∞ùËØïÂä†ËΩΩÊú¨Âú∞ GUI ÂÆö‰πâÊñá‰ª∂
            const guiPath = path.join(__dirname, 'guis', `${guiName}.json`);
            try {
                const { readFileSync } = await
                import ('fs');
                const guiConfig = JSON.parse(readFileSync(guiPath, 'utf8'));
                app.whenReady().then(() => {
                    createWindow(guiConfig);
                });
            } catch (error) {
                console.error(`‚ùå Êó†Ê≥ïÂä†ËΩΩ GUI ÂÆö‰πâ: ${guiName}`, error);
            }
        }
    }
})();

// ÁîüÊàêË∞ÉËØï‰ø°ÊÅØÁ™óÂè£HTML
function generateDebugWindowHTML() {
    return `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCP ÊúçÂä°Âô® - Ë∞ÉËØï‰ø°ÊÅØ</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .title {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 10px;
        }
        .debug-section {
            background: #f8fafc;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 4px solid #667eea;
        }
        .section-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }
        .debug-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #e5e7eb;
        }
        .debug-label {
            font-weight: 500;
            color: #666;
        }
        .debug-value {
            font-family: 'Monaco', 'Menlo', monospace;
            background: #e5e7eb;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        .log-container {
            background: #1f2937;
            color: #f9fafb;
            border-radius: 8px;
            padding: 15px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9rem;
            max-height: 300px;
            overflow-y: auto;
        }
        .refresh-btn {
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 20px;
        }
        .refresh-btn:hover {
            background: #5a67d8;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">üîß MCP ÊúçÂä°Âô®Ë∞ÉËØï‰ø°ÊÅØ</h1>
        </div>
        
        <div class="debug-section">
            <div class="section-title">ÊúçÂä°Âô®Áä∂ÊÄÅ</div>
            <div class="debug-item">
                <span class="debug-label">ËøêË°åÁä∂ÊÄÅ</span>
                <span class="debug-value">${mcpServerInfo?.status || 'Êú™Áü•'}</span>
            </div>
            <div class="debug-item">
                <span class="debug-label">ÁõëÂê¨Á´ØÂè£</span>
                <span class="debug-value">${mcpServerInfo?.port || 'Êú™Áü•'}</span>
            </div>
            <div class="debug-item">
                <span class="debug-label">ÂêØÂä®Êó∂Èó¥</span>
                <span class="debug-value">${mcpServerInfo?.startTime ? new Date(mcpServerInfo.startTime).toLocaleString('zh-CN') : 'Êú™Áü•'}</span>
            </div>
            <div class="debug-item">
                <span class="debug-label">ËøêË°åÊó∂Èïø</span>
                <span class="debug-value">${mcpServerInfo?.startTime ? Math.floor((Date.now() - new Date(mcpServerInfo.startTime).getTime()) / 1000) + 's' : 'Êú™Áü•'}</span>
            </div>
        </div>
        
        <div class="debug-section">
            <div class="section-title">Á≥ªÁªü‰ø°ÊÅØ</div>
            <div class="debug-item">
                <span class="debug-label">Node.js ÁâàÊú¨</span>
                <span class="debug-value">${process.version}</span>
            </div>
            <div class="debug-item">
                <span class="debug-label">Âπ≥Âè∞</span>
                <span class="debug-value">${process.platform}</span>
            </div>
            <div class="debug-item">
                <span class="debug-label">Êû∂ÊûÑ</span>
                <span class="debug-value">${process.arch}</span>
            </div>
            <div class="debug-item">
                <span class="debug-label">ÂÜÖÂ≠ò‰ΩøÁî®</span>
                <span class="debug-value">${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB</span>
            </div>
        </div>
        
        <div class="debug-section">
            <div class="section-title">ÂÆûÊó∂Êó•Âøó</div>
            <div class="log-container" id="logContainer">
                <div>üöÄ MCP ÊúçÂä°Âô®Ë∞ÉËØïÊó•Âøó</div>
                <div>üìä Á≠âÂæÖÊó•ÂøóÊõ¥Êñ∞...</div>
            </div>
        </div>
        
        <button class="refresh-btn" onclick="location.reload()">üîÑ Âà∑Êñ∞Ë∞ÉËØï‰ø°ÊÅØ</button>
    </div>
    
    <script>
        // Ê®°ÊãüÊó•ÂøóÊõ¥Êñ∞
        let logCounter = 0;
        setInterval(() => {
            const logContainer = document.getElementById('logContainer');
            logCounter++;
            const timestamp = new Date().toLocaleTimeString('zh-CN');
            const logEntry = document.createElement('div');
            logEntry.textContent = \`[\${timestamp}] Ë∞ÉËØï‰ø°ÊÅØ #\${logCounter} - ÊúçÂä°Âô®ËøêË°åÊ≠£Â∏∏\`;
            logContainer.appendChild(logEntry);
            
            // ‰øùÊåÅÊúÄÊñ∞ÁöÑÊó•ÂøóÂú®Â∫ïÈÉ®
            logContainer.scrollTop = logContainer.scrollHeight;
            
            // ÈôêÂà∂Êó•ÂøóÊù°Êï∞
            if (logContainer.children.length > 50) {
                logContainer.removeChild(logContainer.firstChild);
            }
        }, 2000);
    </script>
</body>
</html>`;
}

// ÁîüÊàê‰ºöËØùÁÆ°ÁêÜÁ™óÂè£HTML
function generateSessionManagerHTML() {
    return `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCP ÊúçÂä°Âô® - ‰ºöËØùÁÆ°ÁêÜ</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }
        .container {
            max-width: 700px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .title {
            font-size: 2rem;
            font-weight: 700;
            color: #10b981;
            margin-bottom: 10px;
        }
        .session-list {
            background: #f8fafc;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .session-item {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #10b981;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .session-info {
            flex: 1;
        }
        .session-id {
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }
        .session-status {
            font-size: 0.9rem;
            color: #666;
        }
        .session-actions {
            display: flex;
            gap: 10px;
        }
        .btn {
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            font-size: 0.9rem;
            cursor: pointer;
            font-weight: 500;
        }
        .btn-info {
            background: #3b82f6;
            color: white;
        }
        .btn-danger {
            background: #ef4444;
            color: white;
        }
        .btn:hover {
            opacity: 0.8;
        }
        .empty-state {
            text-align: center;
            color: #666;
            padding: 40px 20px;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .stat-item {
            background: white;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            border-left: 4px solid #10b981;
        }
        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #10b981;
        }
        .stat-label {
            font-size: 0.9rem;
            color: #666;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">üìã MCP ‰ºöËØùÁÆ°ÁêÜ</h1>
        </div>
        
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-value">0</div>
                <div class="stat-label">Ê¥ªÂä®‰ºöËØù</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">0</div>
                <div class="stat-label">ÊÄªËøûÊé•Êï∞</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">0</div>
                <div class="stat-label">Ê∂àÊÅØÂ§ÑÁêÜ</div>
            </div>
        </div>
        
        <div class="session-list">
            <div class="empty-state">
                <div style="font-size: 3rem; margin-bottom: 15px;">üì≠</div>
                <div>ÂΩìÂâçÊ≤°ÊúâÊ¥ªÂä®ÁöÑMCP‰ºöËØù</div>
                <div style="font-size: 0.9rem; color: #999; margin-top: 10px;">
                    ‰ºöËØùÂ∞ÜÂú®ÂÆ¢Êà∑Á´ØËøûÊé•Êó∂ÊòæÁ§∫Âú®ËøôÈáå
                </div>
            </div>
        </div>
        
        <div style="text-align: center;">
            <button class="btn btn-info" onclick="location.reload()">üîÑ Âà∑Êñ∞‰ºöËØùÂàóË°®</button>
        </div>
    </div>
    
    <script>
        // Ê®°Êãü‰ºöËØùÊï∞ÊçÆÊõ¥Êñ∞
        setTimeout(() => {
            // ËøôÈáåÂèØ‰ª•ÈÄöËøáAPIËé∑ÂèñÂÆûÈôÖÁöÑ‰ºöËØùÊï∞ÊçÆ
            console.log('‰ºöËØùÁÆ°ÁêÜÂô®Â∑≤Âä†ËΩΩ');
        }, 1000);
    </script>
</body>
</html>`;
}

// ÁîüÊàêÊúçÂä°Âô®ËÆæÁΩÆÁ™óÂè£HTML
function generateServerSettingsHTML() {
    const currentSettings = settingsManager.getAllSettings();
    
    return `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCP ÊúçÂä°Âô® - ËÆæÁΩÆ</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .title {
            font-size: 2rem;
            font-weight: 700;
            color: #f59e0b;
            margin-bottom: 10px;
        }
        .setting-group {
            background: #f8fafc;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 4px solid #f59e0b;
        }
        .setting-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }
        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #e5e7eb;
        }
        .setting-item:last-child {
            border-bottom: none;
        }
        .setting-label {
            font-weight: 500;
            color: #666;
        }
        .setting-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        input[type="number"], input[type="text"], select {
            padding: 6px 10px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.9rem;
            width: 120px;
        }
        .toggle {
            position: relative;
            width: 50px;
            height: 24px;
            background: #d1d5db;
            border-radius: 12px;
            cursor: pointer;
            transition: background 0.3s;
        }
        .toggle.active {
            background: #f59e0b;
        }
        .toggle::after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transition: transform 0.3s;
        }
        .toggle.active::after {
            transform: translateX(26px);
        }
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            margin: 5px;
            transition: all 0.3s;
        }
        .btn-primary {
            background: #f59e0b;
            color: white;
        }
        .btn-secondary {
            background: #6b7280;
            color: white;
        }
        .btn:hover {
            opacity: 0.8;
            transform: translateY(-1px);
        }
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        .actions {
            text-align: center;
            margin-top: 30px;
        }
        .status-message {
            margin-top: 15px;
            padding: 10px;
            border-radius: 6px;
            text-align: center;
            font-weight: 500;
            display: none;
        }
        .status-success {
            background: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
        }
        .status-error {
            background: #fee2e2;
            color: #991b1b;
            border: 1px solid #fecaca;
        }
        .loading {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #f59e0b;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">‚öôÔ∏è ÊúçÂä°Âô®ËÆæÁΩÆ</h1>
        </div>
        
        <div class="setting-group">
            <div class="setting-title">ÁΩëÁªúËÆæÁΩÆ</div>
            <div class="setting-item">
                <span class="setting-label">ÁõëÂê¨Á´ØÂè£</span>
                <div class="setting-control">
                    <input type="number" id="server-port" value="${currentSettings.server.port}" min="1000" max="65535">
                </div>
            </div>
            <div class="setting-item">
                <span class="setting-label">ÂêØÁî®CORS</span>
                <div class="setting-control">
                    <div class="toggle ${currentSettings.server.enableCors ? 'active' : ''}" id="enable-cors" onclick="toggleSetting(this)"></div>
                </div>
            </div>
            <div class="setting-item">
                <span class="setting-label">ÊúÄÂ§ßÂπ∂ÂèëËøûÊé•</span>
                <div class="setting-control">
                    <input type="number" id="max-connections" value="${currentSettings.server.maxConnections}" min="1" max="10000">
                </div>
            </div>
            <div class="setting-item">
                <span class="setting-label">‰ºöËØùË∂ÖÊó∂(Áßí)</span>
                <div class="setting-control">
                    <input type="number" id="session-timeout" value="${currentSettings.server.sessionTimeout}" min="60" max="7200">
                </div>
            </div>
        </div>
        
        <div class="setting-group">
            <div class="setting-title">Êó•ÂøóËÆæÁΩÆ</div>
            <div class="setting-item">
                <span class="setting-label">ÂêØÁî®ËØ¶ÁªÜÊó•Âøó</span>
                <div class="setting-control">
                    <div class="toggle ${currentSettings.logging.enableVerbose ? 'active' : ''}" id="enable-verbose" onclick="toggleSetting(this)"></div>
                </div>
            </div>
            <div class="setting-item">
                <span class="setting-label">Êó•ÂøóÁ∫ßÂà´</span>
                <div class="setting-control">
                    <select id="log-level">
                        <option value="debug" ${currentSettings.logging.level === 'debug' ? 'selected' : ''}>Debug</option>
                        <option value="info" ${currentSettings.logging.level === 'info' ? 'selected' : ''}>Info</option>
                        <option value="warn" ${currentSettings.logging.level === 'warn' ? 'selected' : ''}>Warning</option>
                        <option value="error" ${currentSettings.logging.level === 'error' ? 'selected' : ''}>Error</option>
                    </select>
                </div>
            </div>
        </div>
        
        <div class="setting-group">
            <div class="setting-title">ÁïåÈù¢ËÆæÁΩÆ</div>
            <div class="setting-item">
                <span class="setting-label">ÂßãÁªàÁΩÆÈ°∂</span>
                <div class="setting-control">
                    <div class="toggle ${currentSettings.ui.alwaysOnTop ? 'active' : ''}" id="always-on-top" onclick="toggleSetting(this)"></div>
                </div>
            </div>
            <div class="setting-item">
                <span class="setting-label">ÊòæÁ§∫ÊâòÁõòÂõæÊ†á</span>
                <div class="setting-control">
                    <div class="toggle ${currentSettings.ui.showInTray ? 'active' : ''}" id="show-in-tray" onclick="toggleSetting(this)"></div>
                </div>
            </div>
        </div>
        
        <div class="actions">
            <button class="btn btn-primary" id="save-btn" onclick="saveSettings()">üíæ ‰øùÂ≠òËÆæÁΩÆ</button>
            <button class="btn btn-secondary" id="reset-btn" onclick="resetSettings()">üîÑ ÈáçÁΩÆÈªòËÆ§</button>
        </div>
        
        <div class="status-message" id="status-message"></div>
    </div>
    
    <script>
        function toggleSetting(element) {
            element.classList.toggle('active');
        }
        
        function showStatus(message, isError = false) {
            const statusEl = document.getElementById('status-message');
            statusEl.textContent = message;
            statusEl.className = 'status-message ' + (isError ? 'status-error' : 'status-success');
            statusEl.style.display = 'block';
            
            setTimeout(() => {
                statusEl.style.display = 'none';
            }, 5000);
        }
        
        function setLoading(isLoading) {
            const saveBtn = document.getElementById('save-btn');
            const resetBtn = document.getElementById('reset-btn');
            
            if (isLoading) {
                saveBtn.innerHTML = '<span class="loading"></span>‰øùÂ≠ò‰∏≠...';
                saveBtn.disabled = true;
                resetBtn.disabled = true;
            } else {
                saveBtn.innerHTML = 'üíæ ‰øùÂ≠òËÆæÁΩÆ';
                saveBtn.disabled = false;
                resetBtn.disabled = false;
            }
        }
        
        async function saveSettings() {
            try {
                setLoading(true);
                
                // Êî∂ÈõÜÊâÄÊúâËÆæÁΩÆ
                const settings = {
                    'server.port': parseInt(document.getElementById('server-port').value),
                    'server.enableCors': document.getElementById('enable-cors').classList.contains('active'),
                    'server.maxConnections': parseInt(document.getElementById('max-connections').value),
                    'server.sessionTimeout': parseInt(document.getElementById('session-timeout').value),
                    'logging.enableVerbose': document.getElementById('enable-verbose').classList.contains('active'),
                    'logging.level': document.getElementById('log-level').value,
                    'ui.alwaysOnTop': document.getElementById('always-on-top').classList.contains('active'),
                    'ui.showInTray': document.getElementById('show-in-tray').classList.contains('active')
                };
                
                console.log('‰øùÂ≠òËÆæÁΩÆ:', settings);
                
                // Ë∞ÉÁî®‰∏ªËøõÁ®ã‰øùÂ≠òËÆæÁΩÆ
                const result = await window.electronAPI.invoke('save-settings', settings);
                
                if (result.success) {
                    let message = result.message;
                    if (result.serverRestarted) {
                        message += '\\nÊúçÂä°Âô®Â∑≤Âú®Êñ∞Á´ØÂè£‰∏äÈáçÂêØ';
                    }
                    showStatus(message);
                } else {
                    showStatus('‰øùÂ≠òÂ§±Ë¥•: ' + result.error, true);
                    if (result.details) {
                        console.error('È™åËØÅÈîôËØØ:', result.details);
                    }
                }
            } catch (error) {
                console.error('‰øùÂ≠òËÆæÁΩÆÊó∂Âá∫Èîô:', error);
                showStatus('‰øùÂ≠òËÆæÁΩÆÊó∂Âá∫Èîô: ' + error.message, true);
            } finally {
                setLoading(false);
            }
        }
        
        async function resetSettings() {
            if (!confirm('Á°ÆÂÆöË¶ÅÈáçÁΩÆ‰∏∫ÈªòËÆ§ËÆæÁΩÆÂêóÔºüËøôÂ∞ÜË¶ÜÁõñÊâÄÊúâÂΩìÂâçËÆæÁΩÆ„ÄÇ')) {
                return;
            }
            
            try {
                setLoading(true);
                
                const result = await window.electronAPI.invoke('reset-settings');
                
                if (result.success) {
                    showStatus(result.message);
                    // Âª∂ËøüÂà∑Êñ∞È°µÈù¢‰ª•ÊòæÁ§∫Êñ∞ÁöÑÈªòËÆ§ÂÄº
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    showStatus('ÈáçÁΩÆÂ§±Ë¥•: ' + result.error, true);
                }
            } catch (error) {
                console.error('ÈáçÁΩÆËÆæÁΩÆÊó∂Âá∫Èîô:', error);
                showStatus('ÈáçÁΩÆËÆæÁΩÆÊó∂Âá∫Èîô: ' + error.message, true);
            } finally {
                setLoading(false);
            }
        }
        
        // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÁöÑÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', () => {
            console.log('ËÆæÁΩÆÈ°µÈù¢Â∑≤Âä†ËΩΩ');
            
            // Ê£ÄÊü• electronAPI ÊòØÂê¶ÂèØÁî®
            if (!window.electronAPI) {
                showStatus('Êó†Ê≥ïËøûÊé•Âà∞‰∏ªËøõÁ®ãÔºåËÆæÁΩÆÂäüËÉΩ‰∏çÂèØÁî®', true);
                document.getElementById('save-btn').disabled = true;
                document.getElementById('reset-btn').disabled = true;
            }
        });
    </script>
</body>
</html>`;
}

console.log('üöÄ NexusGUI ‰∏ªËøõÁ®ãÂ∑≤ÂêØÂä®');